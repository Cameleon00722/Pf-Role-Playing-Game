(* fonction import *)

Random.self_init();;


(* création personnage *) 

type genre = Male | Female
type classe = Guerrier | Archer | Magicien
type item = | Eponge | Piece | Cuisse_poulet ;;
type quantite = int ;;
type items = { item: item; quantite: quantite} ;;


type personnage = {nom : string ; classe : classe ;  genre : genre ; pv: int; exp : int; niveau : int; sac : items list} ;;

type personnage = {nom : string ; classe : classe ;  genre : genre ; pv: int; exp : int; niveau : int; sac : items list}



(* partie monstre *) 

type type_de_monstre = | Golem | Nuee_de_moustiques | Sanglier
type choix_butin = | Eponge | Poulet | Piece
                     
type monstre = {nom : type_de_monstre ; pv : int ; attaque : int ; loot : choix_butin; nombre : int};;
  
let pv_monstre  = fun mstr -> match mstr.nom with
  | Golem -> mstr.pv + Random.int 6
  | Nuee_de_moustiques -> mstr.pv + Random.int 10
  | Sanglier -> mstr.pv + Random.int 4;;
  

(* Gameplay personnage *) 
    
type item = | Eponge | Piece | Cuisse_poulet ;; 
type quantite = int ;;
type items = { item: item; quantite: quantite} ;;

let item_to_string = fun it->
  match it with 
  | Eponge -> "éponges"
  | Piece -> "pièces"
  | Cuisse_poulet -> "poulets" ;;

let rec afficher_contenu_sac = fun sac ->
  match sac with
  |[]-> print_string "\n"
  |{item=i; quantite= q}::tl when q>0-> 
      print_int q;
      print_string (" "^(item_to_string i));
      print_string "\n";
      afficher_contenu_sac tl
  |{item=i; quantite= q}::tl-> afficher_contenu_sac tl;;
exception No_food 
    (*affichage du sac *)
      (*ligne de séparation*)
      let rec iterate : (int * ('a->'a) * 'a) -> 'a =
  fun (count, f, initial_value) ->
    if count <= 0
    then initial_value
    else iterate (count-1, f, f initial_value)
let repeat_string= fun (s,n) -> iterate (n, (fun s1->s^s1),"")
let enclosing=  fun s -> iterate (1, (fun s1->"+"^s^"+ \n"),s)
let end_line = fun s-> iterate (1, (fun s1->s^"\n"),s)
let separation= fun s->
  end_line(enclosing (repeat_string (s, 29)))
  (*ligne 1*)
  let classe_genree = fun perso ->
  if perso.genre= Male
  then match perso.classe with
    | Guerrier -> "Guerrier"
    | Archer -> "Archer"
    | Magicien -> "Magicien"
  else match perso.classe with
    | Guerrier -> "Guerrière"
    | Archer -> "Archère"
    | Magicien -> "Magicienne" ;;
let ligne_1 = fun perso ->
  "| "^perso.nom^" | "^(classe_genree perso)^"  niveau  "^(string_of_int perso.niveau)^"  |"
      (*ligne 2*)
let ligne_2= fun perso ->
  "| Points de vie       |    "^(string_of_int perso.pv)^" |";;
    (* ligne 3*)
let ligne_3= fun perso ->
  "| Expérience          |     "^(string_of_int perso.exp)^" |";;
  (*ligne 4*)
  (*les geetteurs*)
let rec get_nb_poulet = fun sac ->
match sac with 
|[]-> 0
|{item=Cuisse_poulet; quantite=q}::_->q
|{item=_; quantite=_}::tl-> get_nb_poulet tl ;;
let rec get_nb_piece = fun sac ->
match sac with 
|[]-> 0
|{item=Piece; quantite=q}::_->q
|{item=_; quantite=_}::tl-> get_nb_piece tl ;;
let rec get_nb_eponge = fun sac ->
match sac with 
|[]-> 0
|{item=Eponge; quantite=q}::_->q
|{item=_; quantite=_}::tl-> get_nb_eponge tl ;;
(*affchage mabger*)
let get_msg_manger=fun bo->
  match bo with 
  | true->  "Vous mangez 1 poulet et gagnez 2 points de vie";
  |false->  "Vous n'avez pas de poulet" ;;

let get_1 (a,_) = a;;
let afficher_msg_manger= fun perso->
  get_msg_manger (get_1 (manger perso));;

let ligne_4 = fun perso ->
  "| Sac                         |\n"
  ^"| "^string_of_int (get_nb_eponge perso.sac)^" éponges                   |\n"
  ^"| "^string_of_int (get_nb_poulet perso.sac)^" poulets                   |\n"
  ^"| "^string_of_int (get_nb_piece perso.sac)^" pièces                    |\n" ;;
  (*affichage total*)
  let affichage_etat_perso = fun perso ->
  print_string (separation "-");
  print_string (end_line(ligne_1 perso));
  print_string (separation "-");
  print_string (end_line(ligne_2 perso));
  print_string (separation "-");
  print_string (end_line(ligne_3 perso));
  print_string (separation "-");
  print_string (end_line(ligne_4 perso));
  print_string (separation "-");;

let frapper  = fun perso -> match perso.classe with
  | Guerrier -> if(Random.int 100 <30+perso.niveau*5) then 10 else 0
  | Archer -> if(Random.int 100 <70+perso.niveau*5) then 4 else 0
  | Magicien -> if(Random.int 100 <50+perso.niveau*5) then 5 else 0;;
  
let frapper_monstre = fun monstre -> match monstre.nom with
  | Golem -> 4
  | Nuee_de_moustiques -> 1/2*monstre.nombre
  | Sanglier -> 2;;
(*manger*)
(*pour voir si le perso a du poulet*)
 let rec manger_aux =fun sac->
  match sac with
  |[]->false
  |{item=i; quantite=q}::tl when i=Cuisse_poulet-> if q>0
      then true
      else false
  |{item=i; quantite=q}::tl-> manger_aux tl ;;
(*pour décrémenter le nb de poulet*)
let rec manger_poulet = fun sac ->
  match sac with
  |[]->[]
  |{item=i; quantite=q}::tl when i=Cuisse_poulet->{item=i; quantite=q-1}:: manger_poulet tl
  |{item=i; quantite=q}::tl-> {item=i; quantite=q}::manger_poulet tl ;
      let update_pv =fun perso n ->
        perso.pv<-perso.pv+n ;;
 (*pour voir si le perso a du poulet*)
 let rec manger_aux =fun sac->
  match sac with
  |[]->false
  |{item=i; quantite=q}::tl when i=Cuisse_poulet-> if q>0
      then true
      else false
  |{item=i; quantite=q}::tl-> manger_aux tl ;;

let manger= fun perso ->
  if (manger_aux perso.sac)
  then if perso.pv<20
    then (true,{nom=perso.nom; classe= perso.classe; genre=perso.genre; pv=perso.pv+2; exp=perso.exp; niveau=perso.niveau; sac=(manger_poulet perso.sac)})
else (true,{nom=perso.nom; classe= perso.classe; genre=perso.genre; pv=perso.pv; exp=perso.exp; niveau=perso.niveau; sac=(manger_poulet perso.sac)})
else (false,perso)

(* Appel et lanceur *)

let mon_monstre = {nom=Golem; pv = 25 ; attaque = 1 ; loot= Eponge};; 

let personnage = {nom = "Laurent" ; classe = Guerrier ;  genre = Male  ; pv = 10 ; exp = 0; niveau = 0; sac = [] } ;;
